---
AWSTemplateFormatVersion: '2010-09-09'
Description: Stack for sat-api-pg.
Parameters:
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only
      alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The database authenticator user
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only
      alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database authenticator password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBSuperUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only
      alphanumeric characters.
  DBSuperPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAnonRole:
    Type: String
    Default: 'anonymous'
  DBSchema:
    Type: String
    Default: "api"
  DBPool:
    Type: String
    Default: "10"
  JwtSecret:
    NoEcho: 'true'
    Description: The JWT secret for PostgREST auth.
    Type: String
  MaxRows:
    Type: String
    Default: ""
    Description: "MAX_ROWS env var"
  PreRequest:
    Type: String
    Default: ""
    Description: "PRE_REQUEST env var"
  ListenerHostNamePattern:
    Type: String
    Description: Listen for requests on the load balancer for this domain
    Default: "*"
  OpenRestyImage:
    Type: String
    # Default: 'openresty:latest'
    Description: This image exists in your account's ECR repository.
  Version:
    Type: String
    Default: "latest"
  # PostgrestImage:
    # Type: String
    # Default: 'postgrest/postgrest:v5.2.0'
    # Description: This image is not prepended with the ECR host because
      # it is a standard PostgREST image.
  PostgrestContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  PostgrestContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which are
                 assigned to different paths on the load balancer.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of EC2 instances to launch in your ECS cluster.
  DesiredCount:
    Type: Number
    Default: '0'
    Description: The number of task instances to run on cluster.
  MaxSize:
    Type: Number
    Default: '4'
    Description: Maximum number of EC2 instances that can be launched.
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  ECSAMI:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
    Default: ami-0bc08634af113cccb
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    ConstraintDescription: Please choose a valid instance type.
Outputs:
  PGConnection:
    Value: !Join ['', ['postgres://', !Ref 'DBSuperUser', ':',
                       !Ref 'DBSuperPassword', '@',
                       !GetAtt [DB, Endpoint.Address],
                       ':', !GetAtt [DB, Endpoint.Port], /,
                       !Ref 'DBName']]
    Export:
      Name: !Sub '${AWS::StackName}-PGConnection'
  RDSHost:
    Value: !GetAtt [DB, Endpoint.Address]
    Export:
      Name: !Sub '${AWS::StackName}-RDSHost'
  RESTEndpoint:
    Value: !GetAtt ExternalLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-RESTEndpoint'
Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are two subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.0.255
  # 10.0.1.0 - 10.0.1.255
  #
  # If you need more IP addresses (perhaps you have so many
  # instances that you run out) then you can customize these
  # ranges to add more
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
Resources:
  # VPC in which containers will be networked.
  # It has two public subnets
  # We distribute the subnets across the first two available subnets
  # for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']
  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'rds-subnet'
      SubnetIds:
        - !Ref 'PublicSubnetOne'
        - !Ref 'PublicSubnetTwo'
  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable
  # Allows access from ECS to RDS
  # RDS Resources
  DB:
    Type: AWS::RDS::DBInstance
    DependsOn: GatewayAttachement
    Properties:
      DBName: !Sub '${DBName}'
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      MasterUsername: !Ref 'DBSuperUser'
      MasterUserPassword: !Ref 'DBSuperPassword'
      AllocatedStorage: '207'
      StorageType: 'gp2'
      DBInstanceClass: db.t3.large
      Engine: Postgres
      EngineVersion: '13'
      AllowMajorVersionUpgrade: true
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !Ref ECSSecurityGroup

  # ECS Resources
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the containers
      VpcId: !Ref 'VPC'
  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref 'ExternalLoadBalancerSG'
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref ECSSecurityGroup
  ExternalLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  ExternalLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: "internet-facing"
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "50"
      SecurityGroups:
        - !Ref ExternalLoadBalancerSG
  PlaceholderTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/rest/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 4
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
      TargetType: ip

  ExternalListenerHttp:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      Port: 80
      LoadBalancerArn: !Ref ExternalLoadBalancer
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # Create a rule on the load balancer for routing traffic to the target group
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref ExternalListenerHttp
      Priority: !Ref 'Priority'
  PgRestLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref 'AWS::StackName', '/postgrest']]
  OpenRestyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ['/ecs/', !Ref 'AWS::StackName', '/openresty']]

  # Autoscaling group. This launches the actual EC2 instances that will register
  # themselves as members of the cluster, and run the docker containers.
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref 'ECSAMI'
      SecurityGroups: [!Ref 'ECSSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} \
          --resource ECSAutoScalingGroup --region ${AWS::Region}
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

  # Role for the EC2 hosts. This allows the ECS agent on the EC2 hosts
  # to communciate with the ECS control plane, as well as download the docker
  # images from ECR to run on your host.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:CreateCluster'
                  - 'ecs:DeregisterContainerInstance'
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:Poll'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:Submit*'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                Resource: '*'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: 'postgrest'
          Image: postgrest/postgrest
          Cpu: !Ref 'PostgrestContainerCpu'
          Memory: !Ref 'PostgrestContainerMemory'
          Environment:
            # version used only to trigger image update and oncatiner restart
            - Name: VERSION
              Value: !Ref Version
            - Name: PGRST_DB_URI
              Value: !Join
                - ""
                -
                  - "postgres://"
                  - !Ref DBUser
                  - ":"
                  - !Ref DBPassword
                  - "@"
                  - !GetAtt [DB, Endpoint.Address]
                  - ":"
                  - !GetAtt [DB, Endpoint.Port]
                  - "/"
                  - !Ref DBName
            - Name: PGRST_DB_SCHEMA
              Value: !Ref DBSchema
            - Name: PGRST_DB_ANON_ROLE
              Value: !Ref DBAnonRole
            - Name: PGRST_DB_POOL
              Value: !Ref DBPool
            - Name: PGRST_JWT_SECRET
              Value: !Ref JwtSecret
            - Name: PGRST_MAX_ROWS
              Value: !Ref MaxRows
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref PgRestLogGroup
              awslogs-region: !Ref AWS::Region
        - Name: "openresty"
          Cpu: !Ref 'PostgrestContainerCpu'
          Memory: !Ref 'PostgrestContainerMemory'
          Image: !Join
            - ""
            -
              - !Ref OpenRestyImage
              - ":"
              - !Ref Version
          PortMappings:
            - ContainerPort: "80"
              Protocol: "tcp"
          Environment:
            - Name: DB_HOST
              Value: !GetAtt [DB, Endpoint.Address]
            - Name: DB_PORT
              Value: !GetAtt [DB, Endpoint.Port]
            - Name: DB_NAME
              Value: !Ref DBName
            - Name: DB_SCHEMA
              Value: !Ref DBSchema
            - Name: DB_USER
              Value: !Ref DBUser
            - Name: DB_PASS
              Value: !Ref DBPassword
            - Name: POSTGREST_HOST
              Value: "127.0.0.1"
            - Name: POSTGREST_PORT
              Value: "3000"
            - Name: JWT_SECRET
              Value: !Ref JwtSecret
            - Name: DEVELOPMENT
              Value: "1"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref OpenRestyLogGroup
              awslogs-region: !Ref AWS::Region
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration:
        MaximumPercent: "200"
        MinimumHealthyPercent: "50"
      DesiredCount: !Ref DesiredCount
      LoadBalancers:
        - ContainerName: "openresty"
          TargetGroupArn: !Ref TargetGroup
          ContainerPort: 80
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnetOne
            - !Ref PublicSubnetTwo
